#!/usr/bin/env ruby

require "nokogiri"
require "uri"
require "open-uri"
require "date"
require "yaml"
require "fileutils"
require "tempfile"
require "erb"

class FoodEntry
    attr_reader :date, :kcal, :description

    def self.from_line line
        date, kcal, description = line.split(" ", 3)
        date = Date.parse(date)
        kcal = kcal.to_i
        description.chomp!
        FoodEntry.new(date, kcal, description)
    end

    def initialize date, kcal, description
        @date = date
        @kcal = kcal
        @description = description
    end

    def to_s
        "#{@date} #{@kcal} #{@description}\n"
    end
end

class Config
    def initialize file
        @file = file

        @config = {}
        if File.exists? file
            @config = YAML.load_file(file)
        end

        @defaults = {
            # format: [ key, description, default_value, type ]
            "rate" => [ "how much weight you want to lose per week", 0.5, Float ],
            "goal" => [ "your target weight", nil, Float],
            "image_viewer" => [ "your preferred SVG viewer, for example 'eog -f', 'firefox', 'chromium'", guess_image_viewer, String ],
            "unit" => [ "your desired base unit in kcal", 1, Float ],
            "start_date" => [ "the first day that should be considered by nom [yyyy-mm-dd]", nil, Date ],
            "balance_start" => [ "the day from which on nom should keep track of a energy balance [yyyy-mm-dd]", nil, Date ],
        }
    end

    def guess_image_viewer
        if RbConfig::CONFIG['host_os'] =~ /mswin|mingw|cygwin/
            "start"
        elsif RbConfig::CONFIG['host_os'] =~ /darwin/
            "open"
        elsif RbConfig::CONFIG['host_os'] =~ /linux|bsd/
            "xdg-open"
        else
            nil
        end
    end

    def has key
        @config.has_key?(key) or (@defaults.has_key?(key) and not @defaults[key][1].nil?)
    end

    def get key
        v = nil
        if @config.has_key?(key)
            v = @config[key]
        elsif @defaults.has_key?(key)
            if @defaults[key][1].nil?
                print "Please enter #{@defaults[key][0]}: "
                @config[key] = STDIN.gets.chomp
                open(@file, "w") do |f|
                    f << @config.to_yaml
                end
                v = @config[key]
            else
                v = @defaults[key][1]
            end
        else
            raise "Unknown configuration option '#{key}'"
        end

        if @defaults[key][2] == Float
            v.to_f
        elsif @defaults[key][2] == Date
            if v.class == Date
                v
            else
                Date.parse(v)
            end
        else
            v
        end
    end

    def print_usage
        puts "Configuration options (put these in #{@file}):"
        @defaults.each do |key, value|
            puts "      #{key}".ljust(34)+value[0].capitalize+(value[1].nil? ? "" : " (default: '#{value[1]}')")
        end
    end
end

class WeightDatabase < Hash
    def read file
        FileUtils.touch(file)
        IO.readlines(file).each do |line|
            date, weight = line.split(" ", 2)
            self[Date.parse(date)] = weight.to_f
        end
    end

    alias dates keys
    alias weights values
end

class Nom
    def initialize
        @nom_dir = File.join(Dir.home,".nom")
        if not Dir.exists? @nom_dir
            puts "Creating #{@nom_dir}"
            Dir.mkdir(@nom_dir)
        end

        @config = Config.new(File.join(@nom_dir, "config"))

        @weights = WeightDatabase.new
        @weights.read(File.join(@nom_dir, "weight"))
        @inputs = read_file("input", FoodEntry)

        if @weights.empty?
            print "Welcome to nom! Please enter your current weight: "
            weight [STDIN.gets.chomp]
        end

        date = truncate_date
        @inputs.delete_if{|i| i.date < date}
        @weights.delete_if{|d, w| d < date}

        @weight_estimates = WeightDatabase.new
        @weights.dates.each_cons(2) do |a, b|
            (a+1).upto(b-1) do |d|
                @weight_estimates[d] = @weights[a] + (@weights[a]-@weights[b])/(a-b)*(d-a)
            end
        end

        @inputs_at = {}
        @inputs.each do |i|
            @inputs_at[i.date] = [] if @inputs_at[i.date].nil?
            @inputs_at[i.date] << i
        end

        alpha = 0.1
        beta = 0.1
        trend = -rate/7.0
        @moving_average_at = {start_date => weight_at(start_date)}
        (start_date+1).upto(end_date) do |d|
            @moving_average_at[d] = alpha*weight_at(d) + (1-alpha)*(@moving_average_at[d-1]+trend)
            trend = beta*(@moving_average_at[d]-@moving_average_at[d-1]) + (1-beta)*trend
        end

        (end_date+1).upto(end_date+plot_end) do |d|
            prev_weight = @weight_estimates[d-1] || moving_average_at(d-1)
            @weight_estimates[d] = prev_weight+dampened_rate(prev_weight)/7.0
        end

        @moving_average_estimate = {end_date => moving_average_at(end_date)}
        (end_date+1).upto(end_date+plot_end) do |d|
            @moving_average_estimate[d] = alpha*@weight_estimates[d] + (1-alpha)*(@moving_average_estimate[d-1]+trend)
            trend = beta*(@moving_average_estimate[d]-@moving_average_estimate[d-1]) + (1-beta)*trend
        end

        alpha = 0.05
        @base_rate_at = {}

        @base_rate_at = {start_date => weight_at(start_date)*25*1.2}
        (start_date+1).upto(end_date) do |d|
            intake = consumed_at(d-1)
            if intake == 0
                @base_rate_at[d] = @base_rate_at[d-1]
                next
            end
            loss = moving_average_at(d-1) - moving_average_at(d)
            kcal_per_kg_body_fat = 7000
            burned_kcal = loss*kcal_per_kg_body_fat
            wanted_to_burn = 0
            burned_too_little = wanted_to_burn - burned_kcal
            new_estimation = intake - burned_too_little
            @base_rate_at[d] = alpha*new_estimation + (1-alpha)*@base_rate_at[d-1]
        end
        (end_date+1).upto(Date.today) do |d|
            @base_rate_at[d] = @base_rate_at[d-1]
        end
    end

    def status
        kg_lost = moving_average_at(start_date) - moving_average_at(end_date)
        puts "#{kg_lost.round(1)} kg down (#{(100*kg_lost/(kg_lost+kg_to_go)).round}%), #{kg_to_go.round(1)} kg to go! You'll reach your goal in approximately #{format_duration(days_to_go)}."

        log_since([start_date,Date.today-1].max)
    end

    def log
        log_since(start_date)
    end

    def grep args
        term = args.join(" ")

        inputs = @inputs.select{|i| i.description =~ Regexp.new(term, Regexp::IGNORECASE)}

        if inputs.empty?
            puts "(no matching entries found)"
        end

        inputs.each do |i|
            entry(quantize(i.kcal), i.date.to_s+" "+i.description)
        end

        separator
        entry(quantize(inputs.inject(0){|sum, i| sum+i.kcal}), "total")
    end

    def weight args
        if @weights[Date.today]
            raise "You already entered a weight for today. Use `nom editw` to modify it."
        end

        date = Date.today
        weight = args.pop.to_f

        @weights[date] = weight

        open(File.join(@nom_dir,"weight"), "a") do |f|
            f << "#{date} #{weight}\n"
        end

        initialize
        plot
    end

    def nom args
        nom_entry args, (Time.now-5*60*60).to_date
    end

    def yesterday args
        nom_entry args, Date.today-1
    end

    def search args
        puts "Previous log entries:"
        grep(args)
        term = args.join(" ")
        puts
        term = term.encode("ISO-8859-1")
        url = "http://fddb.info/db/de/suche/?udd=0&cat=site-de&search=#{URI.escape(term)}"

        page = Nokogiri::HTML(open(url))
        results = page.css(".standardcontent a").map{|a| a["href"]}.select{|href| href.include? "lebensmittel"}

        results[0..4].each do |result|
            page = Nokogiri::HTML(open(result))
            title = page.css(".breadcrumb a").last.text
            brand = page.css(".standardcontent p a").select{|a| a["href"].include? "hersteller"}.first.text
            puts "#{title} (#{brand})"

            page.css(".serva").each do |serving|
                size = serving.css("a.servb").text
                kcal = serving.css("div")[5].css("div")[1].text.to_i
                #kj = serving.css("div")[2].css("div")[1].text.to_i
                puts "    (#{quantize(kcal)}) #{size}"
            end
        end
    end

    def plot
        raise "To use this subcommand, please install 'gnuplot'." unless which("gnuplot")

        weight_dat = Tempfile.new("weight")
        goal_weight = moving_average_at(end_date)
        (start_date).upto(end_date+plot_end) do |date|
            weight_dat << "#{date}\t"
            if not @weights[date]
                #weight_dat << "#{@weight_estimates[date]}"
                weight_dat << "-"
            else
                weight_dat << "#{weight_at(date)}"
            end
            if date <= end_date
                weight_dat << "\t#{moving_average_at(date)}\t"
            else
                weight_dat << "\t-"
            end
            if date >= end_date
                weight_dat << "\t#{@moving_average_estimate[date]}\n"
            else
                weight_dat << "\t-\n"
            end
        end
        weight_dat.close

        input_dat = Tempfile.new("input")
        input_dat << "#{start_date-1}\t0\t0\n"
        (start_date).upto(end_date) do |date|
            input_dat << "#{date}\t"
            if consumed_at(date) == 0
                input_dat << "-"
            else
                input_dat << quantize(consumed_at(date))
            end
            input_dat << "\t#{quantize(allowed_kcal(date, 0))}"
            input_dat << "\t#{quantize(allowed_kcal(date))}"
            input_dat << "\n"
        end
        input_dat.close

        svg = Tempfile.new(["plot", ".svg"])
        svg.close
        ObjectSpace.undefine_finalizer(svg) # prevent the svg file from being deleted

        plt_erb = IO.read(File.join(File.dirname(File.expand_path(__FILE__)), "../lib/nom/nom.plt.erb"))

        plt = Tempfile.new("plt")
        plt << ERB.new(plt_erb).result(binding)
        plt.close

        system("gnuplot "+plt.path)

        image_viewer = @config.get("image_viewer")
        system(image_viewer+" "+svg.path)
    end

    def edit
        edit_file "input"
    end

    def editw
        edit_file "weight"
    end

    def config_usage
        @config.print_usage
    end

    private

    def nom_entry args, date
        factors = args.pop.split("x")
        kcal = factors.map{ |f| f.to_f }.inject(1){ |p,f| p*f }
        if kcal == 0
            raise "energy term cannot be zero"
        end

        description = args.join(" ")
        entry = FoodEntry.new(date, kcal, description)

        open(File.join(@nom_dir,"input"), "a") do |f|
            if not @inputs.empty? and entry.date != @inputs.last.date
                f << "\n"
            end
            f << entry.to_s
        end

        @inputs << entry
        if @inputs_at[date].nil?
            @inputs_at[date] = []
        end
        @inputs_at[date] << entry

        status
    end

    def edit_file filename
        editor = ENV["EDITOR"]
        editor = "vim" if editor.nil?
        system("#{editor} #{ENV["HOME"]}/.nom/#{filename}")
    end

    def allowed_kcal date, r=nil
        if r.nil?
            if date > end_date+1
                r = dampened_rate(weight_at(date))
            else
                r = dampened_rate(moving_average_at(date))
            end
        end
        if date > end_date
            date = end_date
        end
        @base_rate_at[date] + r*1000
    end

    def weight_at date
        @weights[date] || @weight_estimates[date]
    end

    def consumed_at date
        inputs_at(date).inject(0){ |sum, i| sum+i.kcal }
    end

    def moving_average_at date
        @moving_average_at[date] || @moving_average_estimate[date]
    end

    def kg_to_go
        moving_average_at(end_date) - goal
    end

    def kcal_to_burn
        kcal_per_kg_body_fat = 7000
        kg_to_go * kcal_per_kg_body_fat
    end

    def days_to_go
        kcal_to_burn.abs/(rate*1000)
    end

    def plot_end
        days_to_go + 14
    end

    def balance_start
        if @config.has("balance_start")
            @config.get("balance_start")
        else
            start_date
        end
    end

    def balance_end
        Date.today-1
    end

    def kcal_balance
        sum = 0
        balance_start.upto(balance_end) do |d|
            if consumed_at(d) != 0
                sum += consumed_at(d) - allowed_kcal(d)
            end
        end
        sum
    end

    def truncate_date
        first_start = @weights.dates.min

        if @config.has("start_date")
            user_start = @config.get("start_date")
            [user_start, first_start].max
        else
            # find the last gap longer than 30 days
            gap = @weights.dates.reverse.each_cons(2).find{|a,b| a-b > 30}
            if gap.nil?
                first_start
            else
                gap.first
            end
        end
    end

    def start_date
        @weights.dates.min
    end

    def end_date
        @weights.dates.max
    end

    def quantize kcal
        return (1.0*kcal/@config.get("unit")).round
    end

    def format_date date
        if date == Date.today
            return "Today"
        elsif date == Date.today-1
            return "Yesterday"
        else
            return date.to_s
        end
    end

    def format_duration days
        if days <= 7
            n = days
            unit = "day"
        elsif days <= 7*4
            n = (days/7.0).round(1)
            unit = "week"
        else
            n = (days/7.0/4.0).round(1)
            unit = "month"
        end
        "#{n} #{unit}#{n == 1 ? "" : "s"}"
    end

    def entry value, text=""
        puts "#{" "*(6-value.to_s.length)}(#{value}) #{text}"
    end

    def separator
        puts "---------------------"
    end

    def log_since start
        remaining = 0
        start.upto(Date.today) do |date|
            remaining += allowed_kcal(date)
            puts
            puts "#{format_date(date)}: (#{quantize(allowed_kcal(date))})"
            puts
            remaining = allowed_kcal(date)
            inputs_at(date).each do |i|
                entry(quantize(i.kcal), i.description)
                remaining -= i.kcal
            end
            separator
            entry(quantize(remaining), "remaining (#{(100-100.0*remaining/allowed_kcal(date)).round}% used)")
        end
        if kcal_balance > 0
            entry(quantize(kcal_balance.abs), "too much since #{balance_start}")
        end
    end

    def read_file name, klass
        result = []
        file = File.join(@nom_dir,name)
        FileUtils.touch(file)
        IO.readlines(file).each do |line|
            next if line == "\n"
            result << klass::from_line(line)
        end
        result
    end

    def goal
        @config.get("goal")
    end

    def rate
        @config.get("rate")
    end

    def dampened_rate weight
        r = (goal-weight).to_f
        if r.abs > 1
            r/r.abs*rate
        else
            r*rate
        end
    end

    def rates
        [0, rate]
    end

    def inputs_at date
        @inputs_at[date] || []
    end

    def which(cmd)
        exts = ENV['PATHEXT'] ? ENV['PATHEXT'].split(';') : ['']
        ENV['PATH'].split(File::PATH_SEPARATOR).each do |path|
            exts.each { |ext|
                exe = File.join(path, "#{cmd}#{ext}")
                return exe if File.executable?(exe) && !File.directory?(exe)
            }
        end
        return nil
    end
end

commands = [
    # format: [ long_form, short_form, arguments, description ]
    [ "status", nil, nil, "Display a short food log" ],
    [ "weight", "w", "<weight>", "Report a weight measurement" ],
    [ "search", "s", "<term>", "Search for a food item in the web" ],
    [ "nom", "n", "<description> <energy>", "Report that you ate something" ],
    [ "yesterday", "y", "<desc.> <energy>", "Like nom, but for yesterday" ],
    [ "plot", "p", nil, "Plot a weight/intake graph" ],
    [ "log", "l", nil, "Display the full food log" ],
    [ "grep", "g", "<term>", "Search in the food log" ],
    [ "edit", "e", nil, "Edit the input file" ],
    [ "editw", "ew", nil, "Edit the weight file" ],
    [ "help", nil, nil, "Print this help" ],
]

nom = Nom.new

cmd_name = ARGV.shift or "status"
command = commands.find{|c| c[0] == cmd_name or c[1] == cmd_name}

if command.nil?
    ARGV.unshift(cmd_name)
    if ARGV.last.to_f != 0
        if ARGV.size > 1
            # some words followed by a number
            cmd_name = "nom"
        else
            # a single number
            cmd_name = "weight"
        end
    else
        # some words
        cmd_name = "search"
    end

    command = commands.find{|c| c[0] == cmd_name or c[1] == cmd_name}
end

if command[0] == "help"
    puts "Available subcommands:"
    commands.each do |c|
        puts "  "+"#{c[1].to_s.rjust(2)}#{c[1] ? "," : " "} #{c[0]} #{c[2]}".ljust(32)+c[3]
    end
    puts "There are some useful defaults:"
    puts "      "+"(no arguments)".ljust(28)+"status"
    puts "      "+"<number>".ljust(28)+"weight <number>"
    puts "      "+"<term>".ljust(28)+"search <term>"
    puts "      "+"<term> <number>".ljust(28)+"nom <term> <number>"
    nom.config_usage
else
    begin
        if ARGV.empty?
            nom.send(command[0])
        else
            nom.send(command[0], ARGV)
        end
    rescue Exception => e
        puts e.backtrace
        puts e.message
        puts "Something went wrong. Usage of this command is: nom #{command[0]} #{command[2]}"
    end
end
